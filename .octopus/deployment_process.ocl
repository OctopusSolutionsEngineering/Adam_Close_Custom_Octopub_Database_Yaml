step "create-namespace-if-not-exists" {
    name = "Create namespace if not exists"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Set varaibles
                $clusterNamespace = $OctopusParameters["Octopub.Yaml.Cluster.Namespace"]
                
                # Get existing namespaces
                Write-Host "Retrieving namespaces ..."
                $namespaces = (kubectl get namespaces -o JSON | ConvertFrom-Json)
                
                # Check to see if namespace exists
                if ($null -eq ($namespaces.Items | Where-Object {$_.metadata.name -eq $clusterNamespace}))
                {
                	# Create the namespace
                    Write-Host "Namespace $clusetrNamespace doesn't exist, creating ..."
                    kubectl create namespace $clusterNamespace
                }
                else
                {
                	Write-Host "Namespace $clusterNamespace already exists, moving on ..."
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = "Project.Worker.Pool"
    }
}

step "mysql-create-database-if-not-exists" {
    name = "MySQL - Create Database If Not Exists"

    action {
        properties = {
            createDatabaseName = "#{Octopub.Yaml.Database.Name}"
            createMySQLServerName = "#{Octopub.Yaml.Database.Server.Name}"
            createPort = "3306"
            createUsername = "#{Octopub.Yaml.Database.Server.User}"
            createUserPassword = "#{Octopub.Yaml.Database.Server.Password}"
            createUseSSL = "True"
            mySqlAuthenticationMethod = "usernamepassword"
            Octopus.Action.Template.Id = "ActionTemplates-3189"
            Octopus.Action.Template.Version = "8"
        }
        worker_pool_variable = "Project.Worker.Pool"
    }
}

step "flyway-database-migrations" {
    name = "Flyway Database Migrations"

    action {
        properties = {
            Flyway.Authentication.Method = "usernamepassword"
            Flyway.Command.BaseLineOnMigrate = "false"
            Flyway.Command.FailOnDrift = "true"
            Flyway.Command.OutOfOrder = "false"
            Flyway.Command.SkipExecutingMigrations = "false"
            Flyway.Command.Target = "latest"
            Flyway.Command.Value = "migrate"
            Flyway.Database.User = "#{Octopub.Yaml.Database.Server.User}"
            Flyway.Database.User.Password = "#{Octopub.Yaml.Database.Server.Password}"
            Flyway.Package.Value = "{\"PackageId\":\"octopub.mysql.flyway\",\"FeedId\":\"octopus-server-built-in\"}"
            Flyway.Target.Url = "#{Octopub.Yaml.Database.ConnectionString}"
            Octopus.Action.Template.Id = "ActionTemplates-3202"
            Octopus.Action.Template.Version = "14"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = "Project.Worker.Pool"

        container {
            feed = "docker-hub"
            image = "octopuslabs/flyway-workertools"
        }

        packages "Flyway.Package.Value" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "octopub.mysql.flyway"
            properties = {
                Extract = "True"
                PackageParameterName = "Flyway.Package.Value"
                SelectionMode = "deferred"
            }
        }
    }
}

step "deploy-database-secret" {
    name = "Deploy database secret"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "secret.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "secret.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Octopub.Yaml.Cluster.Namespace}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""
    }
}